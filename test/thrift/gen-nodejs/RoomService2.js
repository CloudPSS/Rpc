//
// Autogenerated by Thrift Compiler (0.14.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
'use strict';

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const RoomService = require('./RoomService');
const RoomServiceClient = RoomService.Client;
const RoomServiceProcessor = RoomService.Processor;
const ttypes = require('./room_types');
//HELPER FUNCTIONS AND STRUCTURES

const RoomService2_create2_args = class {
    constructor(args) {}

    read(input) {
        input.readStructBegin();
        while (true) {
            const ret = input.readFieldBegin();
            const ftype = ret.ftype;
            if (ftype == Thrift.Type.STOP) {
                break;
            }
            input.skip(ftype);
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }

    write(output) {
        output.writeStructBegin('RoomService2_create2_args');
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
};
const RoomService2_create2_result = class {
    constructor(args) {
        this.success = null;
        if (args) {
            if (args.success !== undefined && args.success !== null) {
                this.success = new ttypes.RoomInfo(args.success);
            }
        }
    }

    read(input) {
        input.readStructBegin();
        while (true) {
            const ret = input.readFieldBegin();
            const ftype = ret.ftype;
            const fid = ret.fid;
            if (ftype == Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 0:
                    if (ftype == Thrift.Type.STRUCT) {
                        this.success = new ttypes.RoomInfo();
                        this.success.read(input);
                    } else {
                        input.skip(ftype);
                    }
                    break;
                case 0:
                    input.skip(ftype);
                    break;
                default:
                    input.skip(ftype);
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }

    write(output) {
        output.writeStructBegin('RoomService2_create2_result');
        if (this.success !== null && this.success !== undefined) {
            output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
};
const RoomService2Client = (exports.Client = class RoomService2Client extends RoomServiceClient {
    constructor(output, pClass) {
        super(output, pClass);
        this.output = output;
        this.pClass = pClass;
        this._seqid = 0;
        this._reqs = {};
    }
    seqid() {
        return this._seqid;
    }
    new_seqid() {
        return (this._seqid += 1);
    }

    create2() {
        this._seqid = this.new_seqid();
        const self = this;
        return new Promise((resolve, reject) => {
            self._reqs[self.seqid()] = (error, result) => {
                return error ? reject(error) : resolve(result);
            };
            self.send_create2();
        });
    }

    send_create2() {
        const output = new this.pClass(this.output);
        const args = new RoomService2_create2_args();
        try {
            output.writeMessageBegin('create2', Thrift.MessageType.CALL, this.seqid());
            args.write(output);
            output.writeMessageEnd();
            return this.output.flush();
        } catch (e) {
            delete this._reqs[this.seqid()];
            if (typeof output.reset === 'function') {
                output.reset();
            }
            throw e;
        }
    }

    recv_create2(input, mtype, rseqid) {
        const callback = this._reqs[rseqid] || function () {};
        delete this._reqs[rseqid];
        if (mtype == Thrift.MessageType.EXCEPTION) {
            const x = new Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        const result = new RoomService2_create2_result();
        result.read(input);
        input.readMessageEnd();

        if (null !== result.success) {
            return callback(null, result.success);
        }
        return callback('create2 failed: unknown result');
    }
});
const RoomService2Processor = (exports.Processor = class RoomService2Processor extends RoomServiceProcessor {
    constructor(handler) {
        super(handler);
        this._handler = handler;
    }
    process(input, output) {
        const r = input.readMessageBegin();
        if (this['process_' + r.fname]) {
            return this['process_' + r.fname].call(this, r.rseqid, input, output);
        } else {
            input.skip(Thrift.Type.STRUCT);
            input.readMessageEnd();
            const x = new Thrift.TApplicationException(
                Thrift.TApplicationExceptionType.UNKNOWN_METHOD,
                'Unknown function ' + r.fname,
            );
            output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
            x.write(output);
            output.writeMessageEnd();
            output.flush();
        }
    }
    process_create2(seqid, input, output) {
        const args = new RoomService2_create2_args();
        args.read(input);
        input.readMessageEnd();
        if (this._handler.create2.length === 0) {
            Promise.resolve(this._handler.create2.bind(this._handler)())
                .then((result) => {
                    const result_obj = new RoomService2_create2_result({ success: result });
                    output.writeMessageBegin('create2', Thrift.MessageType.REPLY, seqid);
                    result_obj.write(output);
                    output.writeMessageEnd();
                    output.flush();
                })
                .catch((err) => {
                    let result;
                    result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
                    output.writeMessageBegin('create2', Thrift.MessageType.EXCEPTION, seqid);
                    result.write(output);
                    output.writeMessageEnd();
                    output.flush();
                });
        } else {
            this._handler.create2((err, result) => {
                let result_obj;
                if (err === null || typeof err === 'undefined') {
                    result_obj = new RoomService2_create2_result(
                        err !== null || typeof err === 'undefined' ? err : { success: result },
                    );
                    output.writeMessageBegin('create2', Thrift.MessageType.REPLY, seqid);
                } else {
                    result_obj = new Thrift.TApplicationException(
                        Thrift.TApplicationExceptionType.UNKNOWN,
                        err.message,
                    );
                    output.writeMessageBegin('create2', Thrift.MessageType.EXCEPTION, seqid);
                }
                result_obj.write(output);
                output.writeMessageEnd();
                output.flush();
            });
        }
    }
});
