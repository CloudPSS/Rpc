//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
'use strict';

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const ttypes = (module.exports = {});
const RoomInfo = (module.exports.RoomInfo = class {
    constructor(args) {
        this.id = null;
        this.expires = null;
        this.username = null;
        this.password = null;
        if (args) {
            if (args.id !== undefined && args.id !== null) {
                this.id = args.id;
            }
            if (args.expires !== undefined && args.expires !== null) {
                this.expires = args.expires;
            }
            if (args.username !== undefined && args.username !== null) {
                this.username = args.username;
            }
            if (args.password !== undefined && args.password !== null) {
                this.password = args.password;
            }
        }
    }

    read(input) {
        input.readStructBegin();
        while (true) {
            const ret = input.readFieldBegin();
            const ftype = ret.ftype;
            const fid = ret.fid;
            if (ftype == Thrift.Type.STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == Thrift.Type.STRING) {
                        this.id = input.readString();
                    } else {
                        input.skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == Thrift.Type.DOUBLE) {
                        this.expires = input.readDouble();
                    } else {
                        input.skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == Thrift.Type.STRING) {
                        this.username = input.readString();
                    } else {
                        input.skip(ftype);
                    }
                    break;
                case 4:
                    if (ftype == Thrift.Type.STRING) {
                        this.password = input.readString();
                    } else {
                        input.skip(ftype);
                    }
                    break;
                default:
                    input.skip(ftype);
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return;
    }

    write(output) {
        output.writeStructBegin('RoomInfo');
        if (this.id !== null && this.id !== undefined) {
            output.writeFieldBegin('id', Thrift.Type.STRING, 1);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.expires !== null && this.expires !== undefined) {
            output.writeFieldBegin('expires', Thrift.Type.DOUBLE, 2);
            output.writeDouble(this.expires);
            output.writeFieldEnd();
        }
        if (this.username !== null && this.username !== undefined) {
            output.writeFieldBegin('username', Thrift.Type.STRING, 3);
            output.writeString(this.username);
            output.writeFieldEnd();
        }
        if (this.password !== null && this.password !== undefined) {
            output.writeFieldBegin('password', Thrift.Type.STRING, 4);
            output.writeString(this.password);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
});
