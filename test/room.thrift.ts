/****************************************************************/
/* Autogenerated on 2022-04-19T08:17:34.927Z with @cloudpss/rpc */
/*                Do not edit this file manually                */
/****************************************************************/
/* eslint-disable */

import {
    TBool,
    TByte,
    TI8,
    TI16,
    TI32,
    TI64,
    TDouble,
    TString,
    TBinary,
    RequiredData,
    TException,
} from '../dist/types';

/** Unix time in microseconds */
export type Date2 = TDouble;


export type RoomInfo2 = RoomInfo;

/** test enum */
export enum E {

    a = 1,

    b = 2,

    c,
}

/** TestUnion */
class Promise$$Base {
    constructor(data: {
        /** r */
        value?: TString;
        /** e */
        error?: RequiredData<typeof RoomNotFoundException>;
    }) { }
}
/** r */
class Promise$value extends Promise$$Base {
    constructor(data: {
        /** r */
        value?: TString;
    }) {
        super(data);
     }
    /** r */
    value?: TString;
}
/** e */
class Promise$error extends Promise$$Base {
    constructor(data: {
        /** e */
        error?: RequiredData<typeof RoomNotFoundException>;
    }) {
        super(data);
     }
    /** e */
    error?: RoomNotFoundException;
}
    
/** TestUnion */
export type Promise = Promise$value | Promise$error;
export const Promise = Promise$$Base as {
    /** r */
    new (data: RequiredData<typeof Promise$value>): Promise$value;
    /** e */
    new (data: RequiredData<typeof Promise$error>): Promise$error;
    new (data: RequiredData<typeof Promise$$Base>): Promise;
    readonly prototype: Promise;
};

/**  rtc room info */
export class RoomInfo {
    constructor(data: {
        /** 
         * id of room
         * @default a
         */
        id?: TString;
        /** expire time in epoch seconds */
        expires?: RequiredData<typeof Date2>;
        /** COTURN username */
        username: TString;
        /** COTURN password */
        password?: TString;

        scopes?: RequiredData<Set<E>>;

        error?: RequiredData<typeof RoomNotFoundException>;
    }) {

        super(data);
    }
    /** 
     * id of room
     * @default a
     */
    id?: TString;
    /** expire time in epoch seconds */
    expires?: Date2;
    /** COTURN username */
    username: TString;
    /** COTURN password */
    password?: TString;

    scopes?: Set<E>;

    error?: RoomNotFoundException;
}

/** *1 */
export class RoomNotFoundException extends TException {
    constructor(data: {

        reason?: TString;
    }) {
        super();
    }

    reason?: TString;
}


export const a: TString = "x//12#xx1";


export const y: RoomInfo = new RoomInfo({
    id: a,
    expires: 123,
    username: "user1",
    password: "pass",
});

/** rtc room service */
class RoomService {}

/** rtc room service */
class RoomService2 {}
