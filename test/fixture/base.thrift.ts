/************************************************/
/* Autogenerated by @cloudpss/rpc 1.0.0-alpha.0 */
/*         On 2023-02-25T10:36:13.258Z          */
/*        Do not edit this file manually        */
/************************************************/

/* eslint-disable */

import * as $ from '@cloudpss/rpc/types';


class bb$Base$ extends $.TUnion {
    constructor(data: {

        a?: $.TData<xx>;

        b?: $.TData<$.TI8>;
    }) {
        if (new.target === bb$Base$) {
            if (data.a !== undefined) return new bb$a(data);
            if (data.b !== undefined) return new bb$b(data);
            throw new Error('Invalid union data');
        }
        super();
    }
}

class bb$a extends bb$Base$ {
    constructor(data: {

        a?: $.TData<xx>;
    }) {
        super(data);
        if (data.a != null)
            this.a = xx.from(data.a);
     }

    a?: xx;
}

class bb$b extends bb$Base$ {
    constructor(data: {

        b?: $.TData<$.TI8>;
    }) {
        super(data);
        if (data.b != null)
            this.b = $.TI8(data.b);
     }

    b?: $.TI8;
}

export type bb = bb$a | bb$b;
export const bb = bb$Base$ as {

    new (data: $.TData<typeof bb$a>): bb$a;

    new (data: $.TData<typeof bb$b>): bb$b;
    new (data: $.TData<typeof bb$Base$>): bb;
    readonly prototype: bb;
};


export class aa extends $.TStruct {
    constructor(data: {

        a?: $.TData<$.TByte>;
    }) {
        super();
        if (data.a != null)
            this.a = $.TByte(data.a);
    }

    a?: $.TByte;
}


export class cc extends $.TException {
    constructor(data: {

    }) {
        super();

    }

}


export type xx = $.TList<aa>;
export const xx = $.TList<aa>;


export type sm = $.TMap<$.TI8, $.TString>;
export const sm = $.TMap<$.TI8, $.TString>;


export const a: $.TI8 = $.TI8(12);


export const x: sm = new sm([[a, $.TString(1)]]);


export const b: bb = new bb({
    a: [new aa({
    a: $.TByte(1),
}), new aa({
    a: $.TByte(2),
}), new aa({
    a: $.TByte(3),
})],
});
